// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

/*
	Package messages is a generated protocol buffer package.

	It is generated from these files:
		message.proto

	It has these top-level messages:
		AllocateNicRequest
		AllocateNicResponse
		FreeNicRequest
		FreeNicResponse
*/
package messages

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AllocateNicRequest struct {
	AutoAssignGateway bool `protobuf:"varint,1,opt,name=autoAssignGateway,proto3" json:"autoAssignGateway,omitempty"`
}

func (m *AllocateNicRequest) Reset()                    { *m = AllocateNicRequest{} }
func (*AllocateNicRequest) ProtoMessage()               {}
func (*AllocateNicRequest) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *AllocateNicRequest) GetAutoAssignGateway() bool {
	if m != nil {
		return m.AutoAssignGateway
	}
	return false
}

type AllocateNicResponse struct {
	Nicid          string `protobuf:"bytes,1,opt,name=nicid,proto3" json:"nicid,omitempty"`
	Nicip          string `protobuf:"bytes,2,opt,name=nicip,proto3" json:"nicip,omitempty"`
	Niccidr        string `protobuf:"bytes,3,opt,name=niccidr,proto3" json:"niccidr,omitempty"`
	Nicgateway     string `protobuf:"bytes,4,opt,name=nicgateway,proto3" json:"nicgateway,omitempty"`
	Servicegateway string `protobuf:"bytes,5,opt,name=servicegateway,proto3" json:"servicegateway,omitempty"`
}

func (m *AllocateNicResponse) Reset()                    { *m = AllocateNicResponse{} }
func (*AllocateNicResponse) ProtoMessage()               {}
func (*AllocateNicResponse) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *AllocateNicResponse) GetNicid() string {
	if m != nil {
		return m.Nicid
	}
	return ""
}

func (m *AllocateNicResponse) GetNicip() string {
	if m != nil {
		return m.Nicip
	}
	return ""
}

func (m *AllocateNicResponse) GetNiccidr() string {
	if m != nil {
		return m.Niccidr
	}
	return ""
}

func (m *AllocateNicResponse) GetNicgateway() string {
	if m != nil {
		return m.Nicgateway
	}
	return ""
}

func (m *AllocateNicResponse) GetServicegateway() string {
	if m != nil {
		return m.Servicegateway
	}
	return ""
}

type FreeNicRequest struct {
	Nicid string `protobuf:"bytes,1,opt,name=nicid,proto3" json:"nicid,omitempty"`
}

func (m *FreeNicRequest) Reset()                    { *m = FreeNicRequest{} }
func (*FreeNicRequest) ProtoMessage()               {}
func (*FreeNicRequest) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

func (m *FreeNicRequest) GetNicid() string {
	if m != nil {
		return m.Nicid
	}
	return ""
}

type FreeNicResponse struct {
}

func (m *FreeNicResponse) Reset()                    { *m = FreeNicResponse{} }
func (*FreeNicResponse) ProtoMessage()               {}
func (*FreeNicResponse) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{3} }

func init() {
	proto.RegisterType((*AllocateNicRequest)(nil), "messages.AllocateNicRequest")
	proto.RegisterType((*AllocateNicResponse)(nil), "messages.AllocateNicResponse")
	proto.RegisterType((*FreeNicRequest)(nil), "messages.FreeNicRequest")
	proto.RegisterType((*FreeNicResponse)(nil), "messages.FreeNicResponse")
}
func (this *AllocateNicRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllocateNicRequest)
	if !ok {
		that2, ok := that.(AllocateNicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AutoAssignGateway != that1.AutoAssignGateway {
		return false
	}
	return true
}
func (this *AllocateNicResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllocateNicResponse)
	if !ok {
		that2, ok := that.(AllocateNicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Nicid != that1.Nicid {
		return false
	}
	if this.Nicip != that1.Nicip {
		return false
	}
	if this.Niccidr != that1.Niccidr {
		return false
	}
	if this.Nicgateway != that1.Nicgateway {
		return false
	}
	if this.Servicegateway != that1.Servicegateway {
		return false
	}
	return true
}
func (this *FreeNicRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FreeNicRequest)
	if !ok {
		that2, ok := that.(FreeNicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Nicid != that1.Nicid {
		return false
	}
	return true
}
func (this *FreeNicResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FreeNicResponse)
	if !ok {
		that2, ok := that.(FreeNicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *AllocateNicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.AllocateNicRequest{")
	s = append(s, "AutoAssignGateway: "+fmt.Sprintf("%#v", this.AutoAssignGateway)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllocateNicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&messages.AllocateNicResponse{")
	s = append(s, "Nicid: "+fmt.Sprintf("%#v", this.Nicid)+",\n")
	s = append(s, "Nicip: "+fmt.Sprintf("%#v", this.Nicip)+",\n")
	s = append(s, "Niccidr: "+fmt.Sprintf("%#v", this.Niccidr)+",\n")
	s = append(s, "Nicgateway: "+fmt.Sprintf("%#v", this.Nicgateway)+",\n")
	s = append(s, "Servicegateway: "+fmt.Sprintf("%#v", this.Servicegateway)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FreeNicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.FreeNicRequest{")
	s = append(s, "Nicid: "+fmt.Sprintf("%#v", this.Nicid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FreeNicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&messages.FreeNicResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nicservices service

type NicservicesClient interface {
	AllocateNic(ctx context.Context, in *AllocateNicRequest, opts ...grpc.CallOption) (*AllocateNicResponse, error)
	FreeNic(ctx context.Context, in *FreeNicRequest, opts ...grpc.CallOption) (*FreeNicResponse, error)
}

type nicservicesClient struct {
	cc *grpc.ClientConn
}

func NewNicservicesClient(cc *grpc.ClientConn) NicservicesClient {
	return &nicservicesClient{cc}
}

func (c *nicservicesClient) AllocateNic(ctx context.Context, in *AllocateNicRequest, opts ...grpc.CallOption) (*AllocateNicResponse, error) {
	out := new(AllocateNicResponse)
	err := grpc.Invoke(ctx, "/messages.Nicservices/AllocateNic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nicservicesClient) FreeNic(ctx context.Context, in *FreeNicRequest, opts ...grpc.CallOption) (*FreeNicResponse, error) {
	out := new(FreeNicResponse)
	err := grpc.Invoke(ctx, "/messages.Nicservices/FreeNic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nicservices service

type NicservicesServer interface {
	AllocateNic(context.Context, *AllocateNicRequest) (*AllocateNicResponse, error)
	FreeNic(context.Context, *FreeNicRequest) (*FreeNicResponse, error)
}

func RegisterNicservicesServer(s *grpc.Server, srv NicservicesServer) {
	s.RegisterService(&_Nicservices_serviceDesc, srv)
}

func _Nicservices_AllocateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NicservicesServer).AllocateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Nicservices/AllocateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NicservicesServer).AllocateNic(ctx, req.(*AllocateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nicservices_FreeNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NicservicesServer).FreeNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Nicservices/FreeNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NicservicesServer).FreeNic(ctx, req.(*FreeNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nicservices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Nicservices",
	HandlerType: (*NicservicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateNic",
			Handler:    _Nicservices_AllocateNic_Handler,
		},
		{
			MethodName: "FreeNic",
			Handler:    _Nicservices_FreeNic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

func (m *AllocateNicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateNicRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AutoAssignGateway {
		dAtA[i] = 0x8
		i++
		if m.AutoAssignGateway {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AllocateNicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateNicResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nicid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Nicid)))
		i += copy(dAtA[i:], m.Nicid)
	}
	if len(m.Nicip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Nicip)))
		i += copy(dAtA[i:], m.Nicip)
	}
	if len(m.Niccidr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Niccidr)))
		i += copy(dAtA[i:], m.Niccidr)
	}
	if len(m.Nicgateway) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Nicgateway)))
		i += copy(dAtA[i:], m.Nicgateway)
	}
	if len(m.Servicegateway) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Servicegateway)))
		i += copy(dAtA[i:], m.Servicegateway)
	}
	return i, nil
}

func (m *FreeNicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FreeNicRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nicid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Nicid)))
		i += copy(dAtA[i:], m.Nicid)
	}
	return i, nil
}

func (m *FreeNicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FreeNicResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Message(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Message(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AllocateNicRequest) Size() (n int) {
	var l int
	_ = l
	if m.AutoAssignGateway {
		n += 2
	}
	return n
}

func (m *AllocateNicResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nicid)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Nicip)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Niccidr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Nicgateway)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Servicegateway)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *FreeNicRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nicid)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *FreeNicResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AllocateNicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocateNicRequest{`,
		`AutoAssignGateway:` + fmt.Sprintf("%v", this.AutoAssignGateway) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllocateNicResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocateNicResponse{`,
		`Nicid:` + fmt.Sprintf("%v", this.Nicid) + `,`,
		`Nicip:` + fmt.Sprintf("%v", this.Nicip) + `,`,
		`Niccidr:` + fmt.Sprintf("%v", this.Niccidr) + `,`,
		`Nicgateway:` + fmt.Sprintf("%v", this.Nicgateway) + `,`,
		`Servicegateway:` + fmt.Sprintf("%v", this.Servicegateway) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FreeNicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FreeNicRequest{`,
		`Nicid:` + fmt.Sprintf("%v", this.Nicid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FreeNicResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FreeNicResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AllocateNicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateNicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateNicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoAssignGateway", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoAssignGateway = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateNicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateNicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateNicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nicid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nicid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nicip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nicip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Niccidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Niccidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nicgateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nicgateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servicegateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servicegateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FreeNicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FreeNicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FreeNicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nicid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nicid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FreeNicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FreeNicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FreeNicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xbb, 0x4e, 0xc3, 0x40,
	0x10, 0xf4, 0x02, 0x21, 0x61, 0x23, 0x82, 0x72, 0x50, 0x98, 0x08, 0x56, 0xc8, 0x45, 0x44, 0x11,
	0xa5, 0x80, 0x1e, 0x29, 0x29, 0x40, 0xa2, 0x48, 0xe1, 0x3f, 0x30, 0x97, 0x93, 0x75, 0x52, 0xb0,
	0x8d, 0xd7, 0x01, 0xd1, 0xf1, 0x09, 0xb4, 0xd4, 0x34, 0x7c, 0x0a, 0x65, 0x4a, 0x4a, 0x7c, 0x34,
	0x94, 0xf9, 0x04, 0x24, 0x3f, 0x88, 0x43, 0x42, 0xb9, 0x33, 0xb3, 0x7b, 0x33, 0x73, 0xb8, 0x7b,
	0xab, 0x98, 0x3d, 0x5f, 0xf5, 0xa3, 0x38, 0x4c, 0x42, 0xd1, 0x28, 0x46, 0x76, 0x86, 0x28, 0x06,
	0x93, 0x49, 0x28, 0xbd, 0x44, 0x8d, 0xb4, 0x74, 0xd5, 0xdd, 0x54, 0x71, 0x22, 0x7a, 0xd8, 0xf6,
	0xa6, 0x49, 0x38, 0x60, 0xd6, 0x7e, 0x70, 0xe5, 0x25, 0xea, 0xc1, 0x7b, 0xb4, 0xe1, 0x04, 0x4e,
	0x1b, 0xee, 0x2a, 0xe1, 0xbc, 0x02, 0xee, 0x2f, 0x1d, 0xe1, 0x28, 0x0c, 0x58, 0x89, 0x03, 0xac,
	0x05, 0x5a, 0xea, 0x71, 0xb6, 0xb9, 0xe3, 0xe6, 0x43, 0x89, 0x46, 0xf6, 0xc6, 0x02, 0x8d, 0x84,
	0x8d, 0xf5, 0x40, 0x4b, 0xa9, 0xc7, 0xb1, 0xbd, 0x99, 0xe1, 0xe5, 0x28, 0x08, 0x31, 0xd0, 0xd2,
	0x2f, 0x4c, 0x6c, 0x65, 0x64, 0x05, 0x11, 0x5d, 0x6c, 0xb1, 0x8a, 0xef, 0xb5, 0x54, 0xa5, 0xa6,
	0x96, 0x69, 0xfe, 0xa0, 0x4e, 0x17, 0x5b, 0x97, 0xb1, 0xaa, 0xa6, 0x5c, 0xeb, 0xcf, 0x69, 0xe3,
	0xde, 0xaf, 0x2e, 0x0f, 0x72, 0xf6, 0x02, 0xd8, 0x1c, 0x69, 0x59, 0x1c, 0x64, 0x71, 0x8d, 0xcd,
	0x4a, 0x5e, 0x71, 0xd4, 0x2f, 0xeb, 0xec, 0xaf, 0x76, 0xd9, 0x39, 0xfe, 0x87, 0x2d, 0x4a, 0xba,
	0xc0, 0x7a, 0xf1, 0x9c, 0xb0, 0x17, 0xca, 0x65, 0xa7, 0x9d, 0xc3, 0x35, 0x4c, 0xbe, 0x3f, 0xec,
	0xcd, 0x52, 0xb2, 0x3e, 0x52, 0xb2, 0xe6, 0x29, 0xc1, 0x93, 0x21, 0x78, 0x33, 0x04, 0xef, 0x86,
	0x60, 0x66, 0x08, 0x3e, 0x0d, 0xc1, 0xb7, 0x21, 0x6b, 0x6e, 0x08, 0x9e, 0xbf, 0xc8, 0xba, 0xd9,
	0xce, 0xfe, 0xff, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xdd, 0x33, 0xf2, 0x10, 0x02, 0x00,
	0x00,
}
