// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.2
// source: pkg/rpc/message.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_FREE     Status = 0
	Status_USING    Status = 1
	Status_DELETING Status = 2
	Status_ERROR    Status = 3
	Status_DELETED  Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "FREE",
		1: "USING",
		2: "DELETING",
		3: "ERROR",
		4: "DELETED",
	}
	Status_value = map[string]int32{
		"FREE":     0,
		"USING":    1,
		"DELETING": 2,
		"ERROR":    3,
		"DELETED":  4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_rpc_message_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_pkg_rpc_message_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{0}
}

type Phase int32

const (
	Phase_Init            Phase = 0
	Phase_CreateAndAttach Phase = 1
	Phase_JoinBridge      Phase = 2
	Phase_SetRouteTable   Phase = 3
	Phase_Succeeded       Phase = 4
)

// Enum value maps for Phase.
var (
	Phase_name = map[int32]string{
		0: "Init",
		1: "CreateAndAttach",
		2: "JoinBridge",
		3: "SetRouteTable",
		4: "Succeeded",
	}
	Phase_value = map[string]int32{
		"Init":            0,
		"CreateAndAttach": 1,
		"JoinBridge":      2,
		"SetRouteTable":   3,
		"Succeeded":       4,
	}
)

func (x Phase) Enum() *Phase {
	p := new(Phase)
	*p = x
	return p
}

func (x Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_rpc_message_proto_enumTypes[1].Descriptor()
}

func (Phase) Type() protoreflect.EnumType {
	return &file_pkg_rpc_message_proto_enumTypes[1]
}

func (x Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phase.Descriptor instead.
func (Phase) EnumDescriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{1}
}

type VxNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Gateway    string `protobuf:"bytes,2,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	Network    string `protobuf:"bytes,3,opt,name=Network,proto3" json:"Network,omitempty"`
	RouterID   string `protobuf:"bytes,4,opt,name=RouterID,proto3" json:"RouterID,omitempty"`
	IPStart    string `protobuf:"bytes,5,opt,name=IPStart,proto3" json:"IPStart,omitempty"`
	IPEnd      string `protobuf:"bytes,6,opt,name=IPEnd,proto3" json:"IPEnd,omitempty"`
	TunnelType string `protobuf:"bytes,7,opt,name=TunnelType,proto3" json:"TunnelType,omitempty"`
}

func (x *VxNet) Reset() {
	*x = VxNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxNet) ProtoMessage() {}

func (x *VxNet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxNet.ProtoReflect.Descriptor instead.
func (*VxNet) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{0}
}

func (x *VxNet) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *VxNet) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *VxNet) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *VxNet) GetRouterID() string {
	if x != nil {
		return x.RouterID
	}
	return ""
}

func (x *VxNet) GetIPStart() string {
	if x != nil {
		return x.IPStart
	}
	return ""
}

func (x *VxNet) GetIPEnd() string {
	if x != nil {
		return x.IPEnd
	}
	return ""
}

func (x *VxNet) GetTunnelType() string {
	if x != nil {
		return x.TunnelType
	}
	return ""
}

type HostNic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VxNet          *VxNet `protobuf:"bytes,1,opt,name=VxNet,proto3" json:"VxNet,omitempty"`
	ID             string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	HardwareAddr   string `protobuf:"bytes,3,opt,name=HardwareAddr,proto3" json:"HardwareAddr,omitempty"`
	PrimaryAddress string `protobuf:"bytes,4,opt,name=PrimaryAddress,proto3" json:"PrimaryAddress,omitempty"`
	IsPrimary      bool   `protobuf:"varint,5,opt,name=IsPrimary,proto3" json:"IsPrimary,omitempty"`
	Using          bool   `protobuf:"varint,6,opt,name=Using,proto3" json:"Using,omitempty"`
	Reserved       bool   `protobuf:"varint,7,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
	RouteTableNum  int32  `protobuf:"varint,8,opt,name=RouteTableNum,proto3" json:"RouteTableNum,omitempty"`
	Status         Status `protobuf:"varint,9,opt,name=Status,proto3,enum=rpc.Status" json:"Status,omitempty"`
	Phase          Phase  `protobuf:"varint,10,opt,name=Phase,proto3,enum=rpc.Phase" json:"Phase,omitempty"`
}

func (x *HostNic) Reset() {
	*x = HostNic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostNic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostNic) ProtoMessage() {}

func (x *HostNic) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostNic.ProtoReflect.Descriptor instead.
func (*HostNic) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{1}
}

func (x *HostNic) GetVxNet() *VxNet {
	if x != nil {
		return x.VxNet
	}
	return nil
}

func (x *HostNic) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HostNic) GetHardwareAddr() string {
	if x != nil {
		return x.HardwareAddr
	}
	return ""
}

func (x *HostNic) GetPrimaryAddress() string {
	if x != nil {
		return x.PrimaryAddress
	}
	return ""
}

func (x *HostNic) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *HostNic) GetUsing() bool {
	if x != nil {
		return x.Using
	}
	return false
}

func (x *HostNic) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

func (x *HostNic) GetRouteTableNum() int32 {
	if x != nil {
		return x.RouteTableNum
	}
	return 0
}

func (x *HostNic) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_FREE
}

func (x *HostNic) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_Init
}

type PodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Namespace  string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Containter string `protobuf:"bytes,3,opt,name=Containter,proto3" json:"Containter,omitempty"`
	Netns      string `protobuf:"bytes,4,opt,name=Netns,proto3" json:"Netns,omitempty"`
	IfName     string `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
	NicType    string `protobuf:"bytes,6,opt,name=NicType,proto3" json:"NicType,omitempty"`
	PodIP      string `protobuf:"bytes,7,opt,name=PodIP,proto3" json:"PodIP,omitempty"`
	HostNic    string `protobuf:"bytes,8,opt,name=HostNic,proto3" json:"HostNic,omitempty"`
	VxNet      string `protobuf:"bytes,9,opt,name=VxNet,proto3" json:"VxNet,omitempty"`
}

func (x *PodInfo) Reset() {
	*x = PodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodInfo) ProtoMessage() {}

func (x *PodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodInfo.ProtoReflect.Descriptor instead.
func (*PodInfo) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{2}
}

func (x *PodInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PodInfo) GetContainter() string {
	if x != nil {
		return x.Containter
	}
	return ""
}

func (x *PodInfo) GetNetns() string {
	if x != nil {
		return x.Netns
	}
	return ""
}

func (x *PodInfo) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *PodInfo) GetNicType() string {
	if x != nil {
		return x.NicType
	}
	return ""
}

func (x *PodInfo) GetPodIP() string {
	if x != nil {
		return x.PodIP
	}
	return ""
}

func (x *PodInfo) GetHostNic() string {
	if x != nil {
		return x.HostNic
	}
	return ""
}

func (x *PodInfo) GetVxNet() string {
	if x != nil {
		return x.VxNet
	}
	return ""
}

type IPAMMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args   *PodInfo `protobuf:"bytes,1,opt,name=Args,proto3" json:"Args,omitempty"`
	Nic    *HostNic `protobuf:"bytes,2,opt,name=Nic,proto3" json:"Nic,omitempty"`
	Peek   bool     `protobuf:"varint,3,opt,name=Peek,proto3" json:"Peek,omitempty"`
	Delete bool     `protobuf:"varint,4,opt,name=Delete,proto3" json:"Delete,omitempty"`
	IP     string   `protobuf:"bytes,5,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *IPAMMessage) Reset() {
	*x = IPAMMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAMMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAMMessage) ProtoMessage() {}

func (x *IPAMMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAMMessage.ProtoReflect.Descriptor instead.
func (*IPAMMessage) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{3}
}

func (x *IPAMMessage) GetArgs() *PodInfo {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *IPAMMessage) GetNic() *HostNic {
	if x != nil {
		return x.Nic
	}
	return nil
}

func (x *IPAMMessage) GetPeek() bool {
	if x != nil {
		return x.Peek
	}
	return false
}

func (x *IPAMMessage) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *IPAMMessage) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type VIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Addr    string `protobuf:"bytes,3,opt,name=Addr,proto3" json:"Addr,omitempty"`
	VxNetID string `protobuf:"bytes,4,opt,name=VxNetID,proto3" json:"VxNetID,omitempty"`
}

func (x *VIP) Reset() {
	*x = VIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VIP) ProtoMessage() {}

func (x *VIP) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VIP.ProtoReflect.Descriptor instead.
func (*VIP) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{4}
}

func (x *VIP) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *VIP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VIP) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *VIP) GetVxNetID() string {
	if x != nil {
		return x.VxNetID
	}
	return ""
}

type SecurityGroupRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	SecurityGroupID string `protobuf:"bytes,3,opt,name=SecurityGroupID,proto3" json:"SecurityGroupID,omitempty"`
	Action          string `protobuf:"bytes,4,opt,name=Action,proto3" json:"Action,omitempty"`
	Protocol        string `protobuf:"bytes,7,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Val3            string `protobuf:"bytes,8,opt,name=Val3,proto3" json:"Val3,omitempty"`
	Direction       int32  `protobuf:"varint,5,opt,name=Direction,proto3" json:"Direction,omitempty"`
	Priority        int32  `protobuf:"varint,6,opt,name=Priority,proto3" json:"Priority,omitempty"`
}

func (x *SecurityGroupRule) Reset() {
	*x = SecurityGroupRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityGroupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityGroupRule) ProtoMessage() {}

func (x *SecurityGroupRule) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityGroupRule.ProtoReflect.Descriptor instead.
func (*SecurityGroupRule) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{5}
}

func (x *SecurityGroupRule) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SecurityGroupRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityGroupRule) GetSecurityGroupID() string {
	if x != nil {
		return x.SecurityGroupID
	}
	return ""
}

func (x *SecurityGroupRule) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SecurityGroupRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SecurityGroupRule) GetVal3() string {
	if x != nil {
		return x.Val3
	}
	return ""
}

func (x *SecurityGroupRule) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *SecurityGroupRule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceID  string `protobuf:"bytes,1,opt,name=InstanceID,proto3" json:"InstanceID,omitempty"`
	NodeID      string `protobuf:"bytes,2,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	HostMachine string `protobuf:"bytes,3,opt,name=HostMachine,proto3" json:"HostMachine,omitempty"`
	PrivateIP   string `protobuf:"bytes,4,opt,name=PrivateIP,proto3" json:"PrivateIP,omitempty"`
	ClusterID   string `protobuf:"bytes,5,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{6}
}

func (x *Node) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *Node) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *Node) GetHostMachine() string {
	if x != nil {
		return x.HostMachine
	}
	return ""
}

func (x *Node) GetPrivateIP() string {
	if x != nil {
		return x.PrivateIP
	}
	return ""
}

func (x *Node) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *Node) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type NicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Vxnet  string `protobuf:"bytes,2,opt,name=Vxnet,proto3" json:"Vxnet,omitempty"`
	Phase  string `protobuf:"bytes,3,opt,name=Phase,proto3" json:"Phase,omitempty"`
	Status string `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Pods   int32  `protobuf:"varint,5,opt,name=Pods,proto3" json:"Pods,omitempty"`
}

func (x *NicInfo) Reset() {
	*x = NicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicInfo) ProtoMessage() {}

func (x *NicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicInfo.ProtoReflect.Descriptor instead.
func (*NicInfo) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{7}
}

func (x *NicInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NicInfo) GetVxnet() string {
	if x != nil {
		return x.Vxnet
	}
	return ""
}

func (x *NicInfo) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *NicInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NicInfo) GetPods() int32 {
	if x != nil {
		return x.Pods
	}
	return 0
}

type NicInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*NicInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NicInfoList) Reset() {
	*x = NicInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NicInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicInfoList) ProtoMessage() {}

func (x *NicInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicInfoList.ProtoReflect.Descriptor instead.
func (*NicInfoList) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{8}
}

func (x *NicInfoList) GetItems() []*NicInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_message_proto_rawDescGZIP(), []int{9}
}

var File_pkg_rpc_message_proto protoreflect.FileDescriptor

var file_pkg_rpc_message_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x22, 0xb7, 0x01, 0x0a,
	0x05, 0x56, 0x78, 0x4e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x50, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x50, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x50, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x49, 0x50, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x4e,
	0x69, 0x63, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x78, 0x4e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x78, 0x4e, 0x65, 0x74, 0x52, 0x05, 0x56,
	0x78, 0x4e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x55,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0xe9, 0x01,
	0x0a, 0x07, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x65, 0x74, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x65, 0x74, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x64, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73,
	0x74, 0x4e, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74,
	0x4e, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x78, 0x4e, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x78, 0x4e, 0x65, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x49, 0x50,
	0x41, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x4e,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x52, 0x03, 0x4e, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x50, 0x65, 0x65, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0x57, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x78, 0x4e, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x78, 0x4e, 0x65, 0x74, 0x49, 0x44,
	0x22, 0xe3, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x61, 0x6c, 0x33,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x61, 0x6c, 0x33, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x6f,
	0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71, 0x0a,
	0x07, 0x4e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x78, 0x6e, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x78, 0x6e, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x64, 0x73,
	0x22, 0x31, 0x0a, 0x0b, 0x4e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x09, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2a, 0x43,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0x58, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4a,
	0x6f, 0x69, 0x6e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x04, 0x32, 0xcd, 0x01,
	0x0a, 0x0a, 0x43, 0x4e, 0x49, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x50, 0x41, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x32, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x69, 0x63, 0x73,
	0x12, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x10,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4e, 0x69, 0x63, 0x73, 0x12,
	0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x0c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x42, 0x0b, 0x5a,
	0x09, 0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pkg_rpc_message_proto_rawDescOnce sync.Once
	file_pkg_rpc_message_proto_rawDescData = file_pkg_rpc_message_proto_rawDesc
)

func file_pkg_rpc_message_proto_rawDescGZIP() []byte {
	file_pkg_rpc_message_proto_rawDescOnce.Do(func() {
		file_pkg_rpc_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_rpc_message_proto_rawDescData)
	})
	return file_pkg_rpc_message_proto_rawDescData
}

var file_pkg_rpc_message_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_rpc_message_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pkg_rpc_message_proto_goTypes = []interface{}{
	(Status)(0),               // 0: rpc.Status
	(Phase)(0),                // 1: rpc.Phase
	(*VxNet)(nil),             // 2: rpc.VxNet
	(*HostNic)(nil),           // 3: rpc.HostNic
	(*PodInfo)(nil),           // 4: rpc.PodInfo
	(*IPAMMessage)(nil),       // 5: rpc.IPAMMessage
	(*VIP)(nil),               // 6: rpc.VIP
	(*SecurityGroupRule)(nil), // 7: rpc.SecurityGroupRule
	(*Node)(nil),              // 8: rpc.Node
	(*NicInfo)(nil),           // 9: rpc.NicInfo
	(*NicInfoList)(nil),       // 10: rpc.NicInfoList
	(*Nothing)(nil),           // 11: rpc.Nothing
}
var file_pkg_rpc_message_proto_depIdxs = []int32{
	2,  // 0: rpc.HostNic.VxNet:type_name -> rpc.VxNet
	0,  // 1: rpc.HostNic.Status:type_name -> rpc.Status
	1,  // 2: rpc.HostNic.Phase:type_name -> rpc.Phase
	4,  // 3: rpc.IPAMMessage.Args:type_name -> rpc.PodInfo
	3,  // 4: rpc.IPAMMessage.Nic:type_name -> rpc.HostNic
	9,  // 5: rpc.NicInfoList.items:type_name -> rpc.NicInfo
	5,  // 6: rpc.CNIBackend.AddNetwork:input_type -> rpc.IPAMMessage
	5,  // 7: rpc.CNIBackend.DelNetwork:input_type -> rpc.IPAMMessage
	11, // 8: rpc.CNIBackend.ShowNics:input_type -> rpc.Nothing
	11, // 9: rpc.CNIBackend.ClearNics:input_type -> rpc.Nothing
	5,  // 10: rpc.CNIBackend.AddNetwork:output_type -> rpc.IPAMMessage
	5,  // 11: rpc.CNIBackend.DelNetwork:output_type -> rpc.IPAMMessage
	10, // 12: rpc.CNIBackend.ShowNics:output_type -> rpc.NicInfoList
	11, // 13: rpc.CNIBackend.ClearNics:output_type -> rpc.Nothing
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_rpc_message_proto_init() }
func file_pkg_rpc_message_proto_init() {
	if File_pkg_rpc_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_rpc_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostNic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAMMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityGroupRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NicInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_rpc_message_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_rpc_message_proto_goTypes,
		DependencyIndexes: file_pkg_rpc_message_proto_depIdxs,
		EnumInfos:         file_pkg_rpc_message_proto_enumTypes,
		MessageInfos:      file_pkg_rpc_message_proto_msgTypes,
	}.Build()
	File_pkg_rpc_message_proto = out.File
	file_pkg_rpc_message_proto_rawDesc = nil
	file_pkg_rpc_message_proto_goTypes = nil
	file_pkg_rpc_message_proto_depIdxs = nil
}
